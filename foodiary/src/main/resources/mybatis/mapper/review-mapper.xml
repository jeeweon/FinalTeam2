<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="review">

	<select id="seq" resultType="int">
		select review_seq.nextval from dual
	</select>
	
	<select id="list" resultType="ReviewDto">
		select * from review order by review_no desc
	</select>
	
	<insert id="insert" parameterType="ReviewDto">
		insert into 
		review(
			review_no, mem_no, review_content, star_score, review_address, review_place)
		values(
			#{reviewNo}, #{memNo}, #{reviewContent}, #{starScore}, #{reviewAddress, jdbcType=VARCHAR}, #{reviewPlace, jdbcType=VARCHAR}
		)
	</insert>
	
	<select id="get" parameterType="int" resultType="ReviewDto">
		select * from review where review_no = #{reviewNo}
	</select>
	
	<update id="edit" parameterType="ReviewDto">
		update review
			set review_content = #{reviewContent}
			where review_no = #{reviewNo}
	</update>
	
	<delete id="delete" parameterType="int">
		delete review where review_no = #{reviewNo}
	</delete>
	
	<update id="plusReplycnt" parameterType="int">
		update review
			set reply_cnt = reply_cnt +1
			where review_no = #{reviewNo}
	</update>
	<update id="minusReplycnt" parameterType="int">
		update review
			set reply_cnt = reply_cnt -1
			where review_no = #{reviewNo}
	</update>
	
	
	<!-- 리뷰 파일첨부 -->
	<insert id="insertAttach" parameterType="ReviewAttachDto">
		insert into review_attach values(#{attachNo}, #{reviewNo})
	</insert>
	<!-- 리뷰 파일 전체조회 -->
	<select id="findAttach" parameterType="int" resultType="AttachDto">
		select * from review_attach_view
		where review_no = #{reviewNo} order by attach_no asc
	</select>
	<!-- 리뷰 대표파일 조회 -->
	<select id="findAttachRep" parameterType="int" resultType="AttachDto">
		select * from (
			select tmp.*,rownum RN from (
				select * from review_attach_view
				where review_no = #{reviewNo} order by attach_no asc
			)TMP
		)where RN =1
	</select>
	
	<!-- 홈 > 리뷰(전체/관심지역) 조회 -->
	<select id="home-list" parameterType="ReviewSearchVO" resultType="ReviewSearchVO">
		select 
			R.*,
			M.mem_nick,
			M.mem_level,
			P.attach_no,
			coalesce(B.cnt, 0) mem_review_cnt, 
			coalesce(C.cnt2, 0) img_cnt,
			decode(L.review_no, null, 'false', 'true') like_check,
			decode(BM.review_no, null, 'false', 'true') bookmark_check
		from review R
		left outer join mem M on R.mem_no = M.mem_no
		left outer join profile_attach P on R.mem_no = P.mem_no
		left outer join(
			select mem_no, count(mem_no) cnt
			from review
			group by mem_no
		)B on R.mem_no = B.mem_no
		left outer join(
			select review_no, count(review_no) cnt2
			from review_attach
			group by review_no
		)C on R.review_no = C.review_no
		left outer join(
			select review_no 
			from likes 
			where mem_no = #{memNo}
		) L on R.review_no = L.review_no
		left outer join(
			select review_no 
			from bookmark 
			where mem_no = #{memNo}
		) BM on R.review_no = BM.review_no
		<where>
			<![CDATA[
				and R.review_report_cnt < 5
			]]>
			<if test="interestArea != null">
				and	instr(review_address, #{interestArea}) > 0 
			</if>
		</where>
		order by R.review_no desc
	</select>
	
	<!-- 홈 > 리뷰(팔로우) 조회 -->
	<select id = "home-follow" parameterType="int" resultType="ReviewSearchVO">
		select 
			R.*, 
			M.mem_nick,
			M.mem_level,
			P.attach_no,
			coalesce(B.cnt, 0) mem_review_cnt, 
			coalesce(C.cnt2, 0) img_cnt, 
			decode(L.review_no, null, 'false', 'true') like_check,
			decode(BM.review_no, null, 'false', 'true') bookmark_check
		from review R
		left outer join follow F on R.mem_no = F.passive_mem_no 
		left outer join mem M on R.mem_no = M.mem_no
		left outer join profile_attach P on R.mem_no = P.mem_no
		left outer join(
			select mem_no, count(mem_no) cnt
			from review
			group by mem_no
		)B on R.mem_no = B.mem_no
		left outer join(
			select review_no, count(review_no) cnt2
			from review_attach
			group by review_no
		)C on R.review_no = C.review_no
		left outer join(
			select review_no 
			from likes 
			where mem_no = #{memNo}
		) L on R.review_no = L.review_no
		left outer join(
			select review_no 
			from bookmark 
			where mem_no = #{memNo}
		) BM on R.review_no = BM.review_no
		where F.active_mem_no = #{memNo}
			<![CDATA[
				and R.review_report_cnt < 5
			]]> 
		order by R.review_no desc
	</select>
	
	<!-- 맛집 탐색 > 비회원 -->	
	<select id = "search-guest" parameterType = "String" resultType="ReviewSearchVO">
		select 
			R.*,
			M.mem_nick,
			M.mem_level,
			P.attach_no,
			coalesce(B.cnt, 0) mem_review_cnt, 
			coalesce(C.cnt2, 0) img_cnt
		from review R
		left outer join mem M on R.mem_no = M.mem_no
		left outer join profile_attach P on R.mem_no = P.mem_no
		left outer join(
			select mem_no, count(mem_no) cnt
			from review
			group by mem_no
		)B on R.mem_no = B.mem_no
		left outer join(
			select review_no, count(review_no) cnt2
			from review_attach
			group by review_no
		)C on R.review_no = C.review_no
		<where>
			<![CDATA[
				R.review_report_cnt < 5
			]]>
			<choose>
		 			<when test="keyword == null">
		 				<![CDATA[
							and (sysdate - review_write_time) <= 30
						]]>	
		 			</when>
		 			<when test="keyword != null">
		 				and (instr(review_place, #{keyword}) > 0 
						or instr(review_address, #{keyword}) > 0 
						or instr(review_content, #{keyword}) > 0)
		 			</when>
		 	</choose>
		</where>
		order by R.like_cnt desc, R.review_no desc
	</select>
	
	<!-- 맛집 탐색 > 회원 -->	
	<select id = "search-mem" parameterType = "ReviewSearchVO" resultType="ReviewSearchVO">
		select 
			R.*,
			M.mem_nick,
			M.mem_level,
			P.attach_no,
			coalesce(B.cnt, 0) mem_review_cnt, 
			coalesce(C.cnt2, 0) img_cnt,
			decode(L.review_no, null, 'false', 'true') like_check,
			decode(BM.review_no, null, 'false', 'true') bookmark_check
		from review R
		left outer join mem M on R.mem_no = M.mem_no
		left outer join profile_attach P on R.mem_no = P.mem_no
		left outer join(
			select mem_no, count(mem_no) cnt
			from review
			group by mem_no
		)B on R.mem_no = B.mem_no
		left outer join(
			select review_no, count(review_no) cnt2
			from review_attach
			group by review_no
		)C on R.review_no = C.review_no
		left outer join(
			select review_no 
			from likes 
			where mem_no = #{memNo}
		) L on R.review_no = L.review_no
		left outer join(
			select review_no 
			from bookmark 
			where mem_no = #{memNo}
		) BM on R.review_no = BM.review_no
		<where>
			<![CDATA[
				R.review_report_cnt < 5
			]]>
			<choose>
		 			<when test="keyword == null">
		 				<![CDATA[
							and (sysdate - review_write_time) <= 30
						]]>	
		 			</when>
		 			<when test="keyword != null">
		 				and (instr(review_place, #{keyword}) > 0 
						or instr(review_address, #{keyword}) > 0 
						or instr(review_content, #{keyword}) > 0)
		 			</when>
		 	</choose>
		</where>
		order by R.like_cnt desc, R.review_no desc
	</select>
	
	<!-- 리뷰신고 테이블 : 신고+1 (insert) -->
	<insert id="insertReviewReport" parameterType="map">
		insert into review_report(review_report_no, review_no, mem_no)
		values(review_report_seq.nextval, #{reviewNo}, #{memNo})
	</insert>
	<!-- 리뷰 테이블 : 신고수+1 (update) -->
	<update id="plusReviewReportCnt" parameterType="int">
		update review
		set review_report_cnt = review_report_cnt +1
		where review_no = #{reviewNo}
	</update>
	<!-- 리뷰 테이블 : 신고수만 조회 -->
	<select id="selectReviewReportCnt" parameterType="int" resultType="int">
		select review_report_cnt from review 
		where review_no = #{reviewNo}
	</select>
	<!-- 리뷰블라인드 테이블 : 신고+1 (insert) -->
	<insert id="insertReviewBlind" parameterType="int">
		insert into review_blind(review_blind_no, review_no, blind_report_cnt)
		values(review_blind_seq.nextval, #{reviewNo}, 1)
	</insert>
	<!-- 리뷰블라인드 테이블 : 신고수+1 (update)
			- 리뷰테이블 신고수 2~4	: 블라인드 상태 0(대기)인 데이터의 신고수 +1
			- 리뷰테이블 신고수 5	: 블라인드 상태 1(블라인드)로 변경, 신고수 +1
			- 리뷰테이블 신고수 6~	: 블라인드 상태 1(블라인드)인 데이터의 신고수 +1	-->
	<update id="plusReviewBlind" parameterType="map">
		update review_blind
		<!-- <bind name="reviewReportCnt" value="reviewReportCnt"/> -->
			<choose>
				<when test="reviewReportCnt >= 2 and reviewReportCnt lte 4">
					set blind_report_cnt = blind_report_cnt +1
					where review_isblind = '0' 
				</when>
				<when test="reviewReportCnt == 5">
					set blind_report_cnt = blind_report_cnt +1,
						review_isblind = '1'
					where review_isblind = '0' 
				</when>
				<when test="reviewReportCnt >= 6">
					set blind_report_cnt = blind_report_cnt +1
					where review_isblind = '1' 
				</when>
			</choose>
		and review_no = #{reviewNo}
	</update>
	
	
	<!-- 특정 회원의 레벨,닉네임,레벨, 프로필번호 -->
	<select id="mem-frofile" parameterType="int" resultType="ReviewWriterVO">
		select
		    M.mem_no, M.mem_nick, M.mem_level, 
		    P.attach_no
		from
		    mem M 
		left outer join profile_attach P
		     on M.mem_no = P.mem_no
		where M.mem_no = #{memNo}
	</select>
	
	<!-- 로그인회원의 좋아요,북마크 여부 -->
	<select id="loginIslike" parameterType="CheckRpLkBkVO" resultType="int">
		select count(review_no) from likes
		where review_no = #{reviewNo} and mem_no = #{memNo}
	</select>
	<select id="loginIsBook" parameterType="CheckRpLkBkVO" resultType="int">
		select count(review_no) from bookmark
		where review_no = #{reviewNo} and mem_no = #{memNo}
	</select>
	
	<!-- 댓글 총갯수 -->
	<select id="replyTotal" parameterType="int" resultType="int">
		select count(reply_no) from reply
		where review_no = #{reviewNo}
	</select>
</mapper>